---
- name: Start WebLogic Managed Servers
  hosts: all
  vars:
    admin_url: "http://192.168.21.163:7001"
    rest_base_url: "{{ admin_url }}/management/wls/latest"
    admin_user: weblogic
    admin_password: P@ssw0rd

  tasks:
    - name: Check if Admin Server is accessible
      uri:
        url: "{{ admin_url }}/console"
        method: GET
        status_code: [200, 302, 401, 403]
        validate_certs: no
      register: admin_server_check
      ignore_errors: yes

    - name: Fail if Admin Server is not accessible
      fail:
        msg: "Unable to connect to Admin Server. Please ensure it's running and accessible."
      when: admin_server_check.status == -1

    - name: Get all servers
      uri:
        url: "{{ rest_base_url }}/servers"
        method: GET
        user: "{{ admin_user }}"
        password: "{{ admin_password }}"
        force_basic_auth: yes
        headers:
          Accept: "application/json"
        status_code: [200]
        validate_certs: no
      register: all_servers

    - name: Set server list directly
      set_fact:
        server_list: "{{ all_servers.json['items'] }}"

    - name: Display server list
      debug:
        var: server_list

    - name: Attempt to start server
      uri:
        url: "{{ rest_base_url }}/servers/id/{{ item.name }}/start"
        method: POST
        user: "{{ admin_user }}"
        password: "{{ admin_password }}"
        force_basic_auth: yes
        headers:
          X-Requested-By: "MyClient"
          Accept: "application/json"
          Content-Type: "application/json"
        body_format: json
        body: {}
        status_code: [200, 202]
        validate_certs: no
        timeout: 60
      register: start_result
      loop: "{{ server_list }}"
      when: 
        - item.state != "running"
        - item.name != "AdminServer"

    - name: Wait for server to start
      uri:
        url: "{{ rest_base_url }}/servers/id/{{ item.name }}"
        method: GET
        user: "{{ admin_user }}"
        password: "{{ admin_password }}"
        force_basic_auth: yes
        headers:
          Accept: "application/json"
        return_content: yes
        validate_certs: no
      register: final_server_status
      until: final_server_status.json.item.state == 'running'
      retries: 15
      delay: 20
      loop: "{{ server_list }}"
      when: 
        - item.state != "running"
        - item.name != "AdminServer"

    - name: Display final server status
      debug:
        msg: "The managed server {{ item.json.item.name }} is now in {{ item.json.item.state }} state."
      loop: "{{ final_server_status.results }}"
      when: 
        - item is not skipped
        - item.item.name != "AdminServer"

    - name: Conclusion
      debug:
        msg: "All managed servers have been processed."