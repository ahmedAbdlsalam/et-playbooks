---
- name: Service Management with Enhanced Error Handling and Flexible Validation
  become: true
  become_user: "{{ item.user }}"
  hosts: localhost
  vars:
    rollback_required: false
    failed_vms: []

  tasks:
    - name: Wait for VMs to be reachable
      wait_for:
        host: "{{ item.ip[0] }}"
        port: 22
        delay: 5
        timeout: 60
      loop: "{{ order }}"
      register: reachability_result
      ignore_errors: yes

    - name: Set fact for unreachable VMs
      set_fact:
        unreachable_vms: "{{ reachability_result.results | selectattr('failed', 'equalto', true) | map(attribute='item') | list }}"

    - name: Fail if any VM is unreachable
      fail:
        msg: "The following VMs are unreachable: {{ unreachable_vms | map(attribute='ip') | join(', ') }}"
      when: unreachable_vms | length > 0

    - name: Start services
      block:
        - name: Execute start command
          ansible.builtin.command: "{{ item.startcmd }}"
          delegate_to: "{{ item.ip[0] }}"
          loop: "{{ order }}"
          register: start_result

        - name: Wait for services to start (if port is specified)
          wait_for:
            host: "{{ item.ip[0] }}"
            port: "{{ item.check_port | default(omit) }}"
            timeout: 300
          loop: "{{ order }}"
          when: item.check_port is defined
          
        - name: Check service status (command method)
          ansible.builtin.command: "{{ item.statuscmd }}"
          delegate_to: "{{ item.ip[0] }}"
          loop: "{{ order }}"
          register: status_result
          when: item.statuscmd is defined and item.statuscmd | length > 0
          ignore_errors: yes

        - name: Check service status (URL method)
          uri:
            url: "{{ item.check_url }}"
            method: GET
            status_code: 200
          delegate_to: "{{ item.ip[0] }}"
          loop: "{{ order }}"
          register: url_status_result
          when: item.check_url is defined
          ignore_errors: yes

        - name: Evaluate service status
          ansible.builtin.assert:
            that: >-
              (item.statuscmd is defined and item.stdout is regex(item.success_regex | default('up'))) or
              (item.check_url is defined and item.status == 200) or
              (item.check_port is defined)
            fail_msg: "Failed to start service on {{ item.item.ip[0] }}"
            success_msg: "Successfully started service on {{ item.item.ip[0] }}"
          loop: "{{ status_result.results + url_status_result.results }}"
          register: assert_result
          ignore_errors: yes

      rescue:
        - name: Set rollback flag
          set_fact:
            rollback_required: true
            failed_vms: "{{ failed_vms + [item.item] }}"
          loop: "{{ assert_result.results }}"
          when: item.failed

    - name: Perform rollback if needed
      block:
        - name: Stop services on failed VMs
          ansible.builtin.command: "{{ item.stopcmd }}"
          delegate_to: "{{ item.ip[0] }}"
          loop: "{{ failed_vms }}"
          when: rollback_required

        - name: Restart services on successfully started VMs
          ansible.builtin.command: "{{ item.startcmd }}"
          delegate_to: "{{ item.ip[0] }}"
          loop: "{{ order | difference(failed_vms) }}"
          when: rollback_required

      always:
        - name: Final status check (command method)
          ansible.builtin.command: "{{ item.statuscmd }}"
          delegate_to: "{{ item.ip[0] }}"
          loop: "{{ order }}"
          register: final_status_cmd
          when: item.statuscmd is defined and item.statuscmd | length > 0
          ignore_errors: yes

        - name: Final status check (URL method)
          uri:
            url: "{{ item.check_url }}"
            method: GET
          delegate_to: "{{ item.ip[0] }}"
          loop: "{{ order }}"
          register: final_status_url
          when: item.check_url is defined
          ignore_errors: yes

        - name: Display final status
          ansible.builtin.debug:
            msg: >-
              Final status for {{ item.item.ip[0] }}:
              {% if item.item.statuscmd is defined %}
                {{ 'UP' if item.stdout is regex(item.item.success_regex | default('up')) else 'DOWN' }}
              {% elif item.item.check_url is defined %}
                {{ 'UP' if item.status == 200 else 'DOWN' }}
              {% elif item.item.check_port is defined %}
                {{ 'UP (Port check only)' }}
              {% else %}
                UNKNOWN (No status check method defined)
              {% endif %}
          loop: "{{ final_status_cmd.results + final_status_url.results }}"

        - name: Fail if rollback was required
          fail:
            msg: "Operation failed and rollback was performed. Check the logs for details."
          when: rollback_required