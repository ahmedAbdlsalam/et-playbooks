---
- name: Service Management with Enhanced Error Handling and Flexible Validation for Linux and Windows
  become: true
  become_user: "{{ item.user }}"
  hosts: localhost
  vars:
    rollback_required: false
    failed_vms: []
    windows_connection_vars:
      ansible_connection: winrm
      ansible_winrm_server_cert_validation: ignore
      ansible_winrm_transport: ntlm

  tasks:
    - name: Analyze payload and set rollback capability
      set_fact:
        rollback_capable_vms: "{{ order | selectattr('statuscmd', 'defined') | selectattr('success_regex', 'defined') | list }}"

    - name: Analyze and print playbook actions
      ansible.builtin.set_fact:
        playbook_actions: >-
          {% set actions = [] %}
          {% for item in order %}
          {% if item.os == 'Linux' %}
          {% set _ = actions.append('Start service on Linux VM: ' ~ item.ip[0]) %}
          {% elif item.os == 'Windows' %}
          {% set _ = actions.append('Start service on Windows VM: ' ~ item.ip[0]) %}
          {% endif %}
          {% if item.check_port is defined %}
          {% set _ = actions.append('Check port ' ~ item.check_port ~ ' on ' ~ item.ip[0]) %}
          {% endif %}
          {% if item.check_url is defined %}
          {% set _ = actions.append('Check URL ' ~ item.check_url ~ ' on ' ~ item.ip[0]) %}
          {% endif %}
          {% if item.statuscmd is defined %}
          {% set _ = actions.append('Run status command on ' ~ item.ip[0]) %}
          {% endif %}
          {% endfor %}
          {{ actions }}

    - name: Print playbook actions and important notes
      ansible.builtin.debug:
        msg: 
          - "This playbook will perform the following actions:"
          - "{{ playbook_actions }}"
          - ""
          - "Important Notes:"
          - "- Validation and rollback mechanisms are based on status commands and success regex provided in the payload."
          - "- Rollback will only be attempted for VMs with both status command and success regex defined."
          - "- Number of VMs capable of rollback: {{ rollback_capable_vms | length }} out of {{ order | length }}"
          - "- VMs without rollback capability: {{ order | difference(rollback_capable_vms) | map(attribute='ip') | list }}"
          - "- Ensure all necessary data is provided in the payload for proper functionality."

    # ... (rest of the playbook remains the same until the rollback section)

    - name: Perform rollback if needed
      block:
        - name: Stop services on failed VMs (Linux)
          ansible.builtin.command: "{{ item.stopcmd }}"
          delegate_to: "{{ item.ip[0] }}"
          loop: "{{ failed_vms | intersect(rollback_capable_vms) }}"
          when: rollback_required and item.os == 'Linux'

        - name: Stop services on failed VMs (Windows)
          win_shell: "{{ item.stopcmd }}"
          delegate_to: "{{ item.ip[0] }}"
          loop: "{{ failed_vms | intersect(rollback_capable_vms) }}"
          when: rollback_required and item.os == 'Windows'
          vars: "{{ windows_connection_vars | combine({'ansible_user': item.winrm_user, 'ansible_password': item.winrm_password}) }}"

        - name: Restart services on successfully started VMs (Linux)
          ansible.builtin.command: "{{ item.startcmd }}"
          delegate_to: "{{ item.ip[0] }}"
          loop: "{{ order | difference(failed_vms) | intersect(rollback_capable_vms) }}"
          when: rollback_required and item.os == 'Linux'

        - name: Restart services on successfully started VMs (Windows)
          win_shell: "{{ item.startcmd }}"
          delegate_to: "{{ item.ip[0] }}"
          loop: "{{ order | difference(failed_vms) | intersect(rollback_capable_vms) }}"
          when: rollback_required and item.os == 'Windows'
          vars: "{{ windows_connection_vars | combine({'ansible_user': item.winrm_user, 'ansible_password': item.winrm_password}) }}"

    # ... (rest of the playbook remains the same)